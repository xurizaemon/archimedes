<?php

/**
 * Implementation of hook_menu().
 */
function archimedes_menu() {
  $items = array();
  $items['admin/reports/archimedes'] = array(
    'title' => t('Archimedes'),
    'access arguments' => array('access administration pages'),
    'page callback' => 'archimedes_out',
    'description' => t('Administer Archimedes'),
    'type' => MENU_NORMAL_ITEM,
  );

  $items['admin/reports/archimedes/data'] = array(
    'title' => t('Data'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );
  $items['admin/reports/archimedes/settings'] = array(
    'title' => t('Settings'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('archimedes_admin'),
    'access arguments' => array('access administration pages'),
    'type' => MENU_LOCAL_TASK,
  );
  $items['admin/reports/archimedes/export'] = array(
    'title' => t('XML Export'),
    'page callback' => 'archimedes_export',
    'access arguments' => array('access administration pages'),
    'type' => MENU_LOCAL_TASK,
  );
  $items['admin/reports/archimedes/update'] = array(
    'title' => t('Force Update'),
    'access arguments' => array('access administration pages'),
    'page callback' => 'archimedes_send_force',
    'type' => MENU_LOCAL_TASK,
    'weight' => 1,
  );
  $items['archimedes/login'] = array(
    'page callback' => 'archimedes_request_admin_access',
    'type' => MENU_CALLBACK,
    // Access to callback is very open.
    'access arguments' => array('string'),
    'access callback' => 'is_string',
  );
  return $items;
} // archimedes_menu()

/**
 * Find and load the archimedes library.
 */
function archimedes_load_library() {
  // Use the libraries module if its enabled.
  if (module_exists('libraries')) {
    $file = libraries_get_path('archimedes') . '/archimdes.class.php';
    if (file_exists($file)) {
      include_once $file;
      return TRUE;
    }
  }
  // If the file is already in the module, use that.
  if (file_exists(dirname(__FILE__) . '/archimedes.class.php')) {
    include_once dirname(__FILE__) . '/archimedes.class.php';
    return TRUE;
  }
  global $conf;
  $options = array(
    'sites/all/libraries/archimedes/archimedes.class.php',
    'profiles/' . $conf['install_profile'] . '/libraries/archimedes/archimedes.class.php',
    conf_path() . '/libraries/archimedes/archimedes.class.php',
  );
  foreach ($options as $path) {
    if (!file_exists($path)) {
      continue;
    }
    include_once $path;
    return TRUE;
  }
  return FALSE;
}

/**
 * Generate a report.
 */
function archimedes_out() {
  archimedes_load_library();
  $owl = archimedes_collect();

  $header = array('Component', 'Value');
  $rows = array(
    array(t('Site title'),(string) $owl->getField('title')),
    array(t('Description'),(string) $owl->getField('body')),
    array(t('Servername'),(string) $owl->getField('field_servername')),
    array(t('Web Server'),(string) $owl->getField('field_webserver')),
    array(t('Web Root'),(string) $owl->getField('field_webroot')),
    array(t('DB Host'),(string) $owl->getField('field_dbhost')),
    array(t('DB Name'),(string) $owl->getField('field_dbname')),
    array(t('Users'),(string) $owl->getField('field_users')),
    array(t('DB Size'),(string) $owl->getField('field_db_size')),
    array(t('Site Data Size'),(string) $owl->getField('field_sitedata')),
    array(t('Webroot Size'),(string) $owl->getField('field_sitesize')),
    array(t('Directory Hash'), (string) $owl->getField('field_directory_hash')),
    array(t('Environment'), (string) $owl->getField('field_site_env')),
  );

  drupal_alter('archimedes_rows',$rows,$owl);
  $table = theme('table', $header, $rows);

  $header = array('Modules','Version','Description');
  $modules = theme('table',$header,$owl->getField('field_drupal_mod')->toArray());

  $header = array('Themes','Version','Description');
  $themes = theme('table',$header,$owl->getField('field_drupal_theme')->toArray());

  $output = '<p>' . t('This page shows the current output from of Archimedes Client for this website. It will not necessarily match what is known by the server.'). '</p>';
  return $output . $table . $modules . $themes;
} // archimedes_out()


function archimedes_export() {
  archimedes_load_library();
  $owl = archimedes_collect();

  return '<pre>' . htmlentities($owl->toXML()) . '</pre>';

} // archimedes_export()

function archimedes_find_root() {
  if (defined('DRUPAL_ROOT')) {
    $root = DRUPAL_ROOT;
  }
  elseif (!empty($_SERVER['DOCUMENT_ROOT'])) {
    $root = $_SERVER['DOCUMENT_ROOT'];
  }
  else {
    $root = substr(dirname(__FILE__), 0, strpos(dirname(__FILE__), drupal_get_path('module', 'archimedes')));
  }

  return $root;
}

function archimedes_collect() {
  global $db_url, $db_type, $base_url;

  $root = archimedes_find_root();

  if (empty($root)) {
    watchdog('Archimedes', "Cannot find Drupal root", array(), WATCHDOG_ERROR);
    return;
  }

  archimedes_load_library();

  // Produce a unique value to represent this instance of Drupal.
  $keys = module_invoke_all('archimedes_id');
  sort($keys);
  $owl = new Archimedes('drupal', variable_get('site_mail', FALSE), md5(implode('', $keys)));

  $owl->createField('title', variable_get('site_name', "unknown"));
  $owl->createField('field_drupal_version', VERSION);
  $owl->createField('field_common_hash', variable_get('archimedes_common_key', ''));

  if (variable_get('archimedes_description', '') != '') {
    $nid = arg(1,drupal_get_normal_path(variable_get('archimedes_description', 'node')));
    $node = node_load($nid);
    $body = trim(substr(drupal_html_to_text($node->body,array('b','strong','i','em','p')),0,500));
    $owl->createField('body', $body);
  } else {
    $owl->createField('body', variable_get('site_mission', 'No description has been set.'));
  }

  $owl->createField('field_servername', $base_url);

  $hostname = archimedes_shell_exec("hostname -f");
  $values = array();
  $values[] = archimedes_value($hostname,'nodereference')
    ->addNode(array('title' => $hostname, 'type' => 'host'));
  $owl->createField('field_webserver', $values)
    ->invokeFacet();
  $owl->createField('field_webroot', 'file://' . $root);

  $urls = array();
  if (!is_array($db_url)) {
    $urls['default'] = $db_url;
  }
  else {
    $urls = $db_url;
  }

  // Database names and sizes.
  $values = array();
  $db_size = 0;
  foreach($urls as $key => $url) {
    $db = parse_url($url);
    $dbnames[] = substr($db['path'],1);
    $dbhost = ($db['host'] == 'localhost' || $db['host'] == '127.0.0.1') ? $hostname : $db['host'];
    $dbhosts[] = archimedes_value($dbhost,'nodereference')
      ->addNode(array('title' => $dbhost, 'type' => 'host'));

    switch ($db_type) {
      case 'pgsql':
        db_set_active($key);
        $db_size += db_result(db_query("SELECT pg_database_size('" . $dbName . "')"));
        db_set_active();
        break;

      case 'mysql':
      case 'mysqli':
        db_set_active($key);
        $rs = db_query("SHOW TABLE STATUS");
        while ($row = db_fetch_object($rs)) {
          $db_size += ($row->Data_length + $row->Index_length);
        }
        db_set_active();
        break;
    }
  }
  $owl->createField('field_db_size', $db_size);
  $owl->createField('field_dbhost', $dbhosts)
    ->invokeFacet();
  $owl->createField('field_dbname', $dbnames);

  $user = array(
    'type' => 'mail',
    'mailto' => 'mailto:' . db_result(db_query("SELECT u.mail FROM {users} u WHERE uid = 1 LIMIT 1")),
  );
  $value = archimedes_value($user['mailto'],'userreference')
    ->addUser($user);
  $owl->createField('field_users', array($value))
    ->invokeFacet();


  // Graphable data.
  $users = archimedes_value(db_result(db_query("SELECT COUNT(uid) FROM {users}"))-1, 'dataset')->setTitle('Users');
  $nodes = archimedes_value(db_result(db_query("SELECT COUNT(nid) FROM {node}")), 'dataset')->setTitle('Nodes');
  $revisions = archimedes_value(db_result(db_query("SELECT COUNT(nid) FROM {node_revisions}")), 'dataset')->setTitle('Revisions');
  $owl->createField('field_c_dataset', array($nodes, $revisions, $users));

  $modules = $themes = array();
  foreach (module_list() as $module) {
    $info = drupal_parse_info_file(drupal_get_path('module', $module) . '/' . $module . '.info');
    $node = array(
      'title'   => $info['name'],
      'body'    => $info['description'],
      'field_name' => $module,
      'field_dru_pkg' => (isset($info['package']) ? $info['package'] : ''),
      'field_dru_proj' => (isset($info['project']) ? $info['project'] : ''),
      'field_mod_version' => $info['version'],
      'field_mod_url' => (isset($info['project status url']) ? $info['project status url'] : ''),
      'type'    => 'drupal_module',
    );
    if (empty($node['field_dru_proj']) && !empty($node['field_dru_pkg']) && (strpos($node['field_dru_pkg'], 'Core -') !== FALSE)) {
      $node['field_dru_proj'] = 'drupal';
    }
    $value = archimedes_value($node['title'], 'drupalmod')
              ->addNode($node);
    $modules[] = $value;
  }

  $owl->createField('field_drupal_mod', $modules)
      ->invokeFacet();


  $result = db_query("SELECT name FROM {system} WHERE status = 1 AND type = 'theme'");
  while ($theme = db_result($result)) {
    $info = drupal_parse_info_file(drupal_get_path('theme', $theme) . '/' . $theme . '.info');
    $node = array(
      'title' => $info['name'],
      'body'  => $info['description'],
      'field_name' => $theme,
      'field_mod_version' => $info['version'],
      'field_dru_proj' => (isset($info['project']) ? $info['project'] : ''),
      'field_mod_url' => (isset($info['project status url']) ? $info['project status url'] : ''),
      'type'  => 'drupal_theme',
    );
    if (empty($node['field_dru_proj']) && in_array($theme, array('bluemarine', 'chameleon', 'garland', 'marvin', 'minnelli', 'pushbutton'))) {
      // Unfortunately, there's no way to tell if a theme is part of core,
      // so we must hard-code a list here.
      $node['field_dru_proj'] = 'drupal';
    }

    $value = archimedes_value($node['title'], 'drupalmod')
              ->addNode($node);

    $themes[] = $value;
  }

  $owl->createField('field_drupal_theme', $themes)
      ->invokeFacet();

  $environment = environment_current(TRUE, 'label');
  $owl->createField('field_site_env', $environment);

  // Allow other modules to add data via hook_archimedes.
  drupal_alter('archimedes', $owl);

  return $owl;
} // archimedes_collect()

/**
 * Implementation of hook_archimedes_id().
 *
 * A instance of an Archimedes report should be based
 * on a single Drupal install which is the environment
 * it says it is, coupled with the database credentials.
 */
function archimedes_archimedes_id() {
  $environment = environment_current();
  return variable_get('archimedes_common_key', '') . $environment;
}


function archimedes_admin() {
  $form = array();

  $form['archimedes_server_email'] = array(
    '#type' => 'textfield',
    '#title' => t('Server email address'),
    '#default_value' => variable_get('archimedes_server_email', 'archimedes@server.com'),
    '#description' => t('Set Archimedes server email address.'),
  );

  $form['archimedes_server_url'] = array(
    '#type' => 'textfield',
    '#title' => 'Archimedes Server URL',
    '#default_value' =>  variable_get('archimedes_server_url', FALSE),
    '#description' => t("This is required if you wish to use a direct update method to the archimedes server apposed to using email."),
  );

  $form['archimedes_send_method'] = array(
    '#type' => 'radios',
    '#title' => 'Archimedes Send Method',
    '#default_value' => variable_get('archimedes_send_method', 'postXML'),
    '#options' => array(
      'sendXML' => 'Email',
      'postXML' => 'HTTP',
    ),
  );

  $form['archimedes_server_key'] = array(
    '#type' => 'textarea',
    '#title' => t('Server Public Key'),
    '#default_value' => variable_get('archimedes_server_key', ''),
    '#description' => t('Set the public key for the Archimedes server. This can be found on the Archimedes server administration pages. If left blank mail will be unencrypted.'),
  );

  $form['archimedes_description'] = array(
    '#type' => 'textfield',
    '#title' => t('Description node'),
    '#size' => 40,
    '#default_value' => variable_get('archimedes_description', ''),
    '#field_prefix' => url(NULL, array('absolute' => TRUE)) . (variable_get('clean_url', 0) ? '' : '?q='),
    '#description' => t('Set the path where Archimedes can find a description for the site. If left blank, the Site Mission is used.'),
  );

  $form['archimedes_cron_update'] = array(
    '#type' => 'textfield',
    '#title' => t('Cron update every x days'),
    '#size' => 5,
    '#default_value' => variable_get('archimedes_cron_update', 1),
    '#description' => t('Set Archimedes minimum cron update period.'),
  );

  $form['archimedes_cron_first'] = array(
    '#type' => 'select',
    '#title' => t('Update on first cron after hour'),
    '#options' => range(0, 23),
    '#default_value' => variable_get('archimedes_cron_first', 0),
    '#description' => t('Set the hour at which Archimedes collects and sends its data. This should ideally be a period with minimal traffic.'),
  );

  $options = array();
  foreach (environment_load() as $key => $env) {
    $options[$key] = $env['label'];
  }

  $form['archimedes_site_environment'] = array(
    '#type' => 'select',
    '#title' => t('Site Environment Type'),
    '#options' => $options,
    '#default_value' => environment_current(TRUE, 'name'),
    '#description' => t('This variable is controlled by the Environment module. See !link to alter the environment.', array('!link' => l('the environment admin page', 'admin/settings/environment'))),
    '#disabled' => TRUE,
  );

  $form['archimedes_allow_administer'] = array(
    '#type' => 'checkbox',
    '#title' => t('Allow "Administer Site" functionality from the server'),
    '#default_value' => variable_get('archimedes_allow_administer', FALSE),
    '#description' => t('Checking this allows authenticated users to gain admin access to this site from the server.'),
  );

  return system_settings_form($form);
}

/**
  * Implementation of hook_validate()
  *
  * Validate the admin settings form when submitted
  *
  * @author Adam Bramley <adam@catalyst.net.nz>
  */
function archimedes_admin_validate($node) {
  $key = $node['archimedes_server_email']['#post']['archimedes_server_key'];
  if (!empty($key) && !openssl_pkey_get_public($key)) {
    form_set_error('archimedes_server_key', t('The public key you provided is invalid'));
  }
}

/**
  * Send a report to the Archimedes server via email.
  *
  * Doesn't use Drupal's messaging system because the communication
  * with the server is independant of Drupal.
  */
function archimedes_send() {
  global $base_url;
  if ($base_url == 'http://default'){ // must have accurate servername
    drupal_set_message('Cannot accurately determine servername. You should set this in settings.php. Update was not sent.','warning');
    return FALSE;
  }

  archimedes_load_library();
  $server_key = variable_get('archimedes_server_key','');
  $site_name  = variable_get('site_name', 'unknown');

  if (variable_get('archimedes_send_method', 'postXML') == 'postXML') {
    $destination = variable_get('archimedes_server_url', FALSE);
  }
  else {
    $destination = 'Archimedes Server <' . variable_get('archimedes_server_email', FALSE) . '>';
  }
  if (!$destination) {
    drupal_set_message('Update failed to send as the ' . l('server email address','admin/reports/archimedes/settings') . ' is not yet set.','error');
    return FALSE;
  }

  $owl = archimedes_collect();
  $ekey = $owl->encrypt($server_key);
  try {
    if (!call_user_func(array($owl, variable_get('archimedes_send_method', 'postXML')), $destination)) {
      throw new Exception('Update failed to send for an unknown reason.');
    }
    drupal_set_message('Update sent successfully to '  . $destination. '. This may take some time to become visible on the server.');
    variable_set('archimedes_cron_last',time());
  }
  catch (Exception $e) {
    drupal_set_message($e->getMessage(), 'error');
    watchdog('Archimedes', $e->getMessage(), array(), WATCHDOG_ERROR);
  }
}

/**
  * Drupal UI callback to force Archimedes client to send a report.
  */
function archimedes_send_force() {
  archimedes_send();
  drupal_goto('admin/reports/archimedes');
}

/**
  * Implementation of hook_cron().
  */
function archimedes_cron() {
  $last_day = strtotime(date('Ymd',variable_get('archimedes_cron_last',0)));
  $curr_day = strtotime(date('Ymd'));
  if (time() > $curr_day + variable_get('archimedes_cron_first',1)*3600 && time() > $last_day + variable_get('archimedes_cron_update',1)*86400) {
    archimedes_send();
  }
}

/**
 * Execute a shell command.
 *
 * Abstracted from Drush.
 */
function archimedes_shell_exec($cmd) {
  $args = func_get_args();

  //do not change the command itself, just the parameters.
  for ($x = 1; $x < sizeof($args); $x++) {
    $args[$x] = escapeshellarg($args[$x]);
  }
  $command = call_user_func_array('sprintf', $args);

  exec($command . ' 2>/dev/null', $output, $result);

  return $output[0];
} // archimedes_shell_exec()

/**
 * Request Admin access to this Drupal site.
 *
 * If function is successfull, the user will be granted
 * user uid:1 access.
 */
function archimedes_request_admin_access() {
  global $user;
  if ($user->uid == 1) {
    drupal_goto('<front>');
  }

  if (!variable_get('archimedes_allow_administer', FALSE)) {
    return drupal_access_denied();
  }

  $keys = module_invoke_all('archimedes_id');
  sort($keys);
  $hash = md5(implode('', $keys));

  archimedes_load_library();

  $request = new ArchimedesRemoteRequest();

  // State machine.
  // When a user is validated, this code will execute.
  if (isset($_SESSION['archimedes_token']) && $request->validateToken($_SESSION['archimedes_token'])) {
      $user = user_load(array('uid' => 1));
      unset($_SESSION['archimedes_token']);
      drupal_set_message("Login from administration server was successful");
      drupal_goto('<front>');
  }

  if (!$token = $request->getToken($hash, variable_get('archimedes_server_key',''))) {
    return drupal_access_denied();
  }

  $_SESSION['archimedes_token'] = $token;

  $request->validateRemoteUser();
  return drupal_access_denied();
}
